////////////////////////////////////////////////////////////////////////////////////////////
Tennis::Tennis(int L2):Ball(L2){}
Tennis::~Tennis(){}

Type get_type(){
	return TENNIS;
}

void Tennis::hit(){
	int x;
	if (state == MISSING){
		cout << "You cannot hit a hidden ball!" << endl;
		return;
	}
	if (state == FTHARMENI){	
		cout << "Plof!" << endl;
		return;
	}
	cout << "Tsaf!" << endl;
	durability-=5;	
	if (durability <= 0) state = FTHARMENI;
	x = rand() % 10;
	if (x==7) state = MISSING;
}

void Tennis::rest(){
	if (state!=MISSING && state!= BROKEN){
		durability+=3;
		if (state == FTHARMENI) state = OK;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////
Pingpong::Pingpong(int L3):Ball(L3){}
Pingpong::~Pingpong(){}

Type get_type(){
	return PINGPONG;
}

void Pingpong::hit(){
	int x;
	if (state == BROKEN) return;
	if (state == MISSING){
		cout << "You cannot hit a hidden ball!" << endl;
		return;
	}
	if (state == FTHARMENI){	
		cout << "Plof!" << endl;
		return;
	}
	cout << "Tsaf!" << endl;
	durability--;	
	if (!durability) state = FTHARMENI;
	x = rand() % 10;
	if (x==6) state = MISSING;
	if (x==9) state = BROKEN;
}

void Pingpong::rest(){
	if (state != MISSING && state != BROKEN) {
		durability++;
		if (state == FTHARMENI) state = OK;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
Basketball::Basketball(int L1): Ball(L1){}
Basketball::~Basketball(){}

Type get_type(){
	return BASKETBALL;
}

void Basketball::hit(){
	int x;
	if (state == MISSING){
		cout << "You cannot hit a hidden ball!" << endl;
		return;
	}
	if (state == FTHARMENI){	
		cout << "Plof!" << endl;
		return;
	}
	cout << "Tsaf!" << endl;
	durability--;	
	if (!durability) state = FTHARMENI;
	x = rand() % 10;
	if (x==8) state = MISSING;	
}
void Basketball::rest(){}

//////////////////////////////////////////////////////////////////////////////////////////////
Ballholder::Ballholder (int N, int L1, int L2, int L3){
	int x,i;
	n=N;
	pinakas = new Ball*[n];
	basketball_ok = 0;
	tennis_ok = 0;
	pingpong_ok = 0;
	for (i=0; i<n; i++){
		x= rand() % 3 + 1;
		if (x==1) {
			pinakas[i] = new Basketball(L1);
			basketball_ok ++;
		}
		else if (x==2){
			 pinakas[i] = new Tennis(L2);
			 tennis_ok ++;
		}
		else {
			 pinakas[i] = new Pingpong(L3);
			 pingpong_ok ++;
		}
	}
}

Ballholder::~Ballholder(){
	int i;	
	for (i=0; i<n; i++) delete pinakas[i]; 
	delete[] pinakas;
}

int Ballholder::hit_a_ball(){
	int x=rand()%N;
	pinakas[x]->hit();
	if (pinakas[x]->get_type() == TENNIS && pinakas[x]-> get_state() != OK)	tennis_ok --;
	if (pinakas[x]->get_type() == BASKETBALL && pinakas[x]-> get_state() != OK)	basketball_ok --;
	if (pinakas[x]->get_type() == PINGPONG && pinakas[x]-> get_state() != OK)	pingpong_ok --;
	return x;	
}

void Ballholder::rest_the_others(int x){
	State previous;
	for (int i=1; i<=N; i++){
		if (i==x) continue;
		previous=pinakas[i]->get_state();
		pinakas[i]->rest();
		if (pinakas[i]->get_state() == OK && previous == FTHARMENI){
			if (pinakas[i]->get_type()==TENNIS) tennis_ok++;
			else if(pinakas[i]->get_type()==BASKETBALL) basketball_ok++;
			else pingpong_ok++;		
		}
	}
}
